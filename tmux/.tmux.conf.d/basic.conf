# - Config --------------------------------------------------------------------
# Set C-a as prefix
unbind C-b
set-option -g prefix C-a
bind C-a send-prefix

# Re-source tmux config with prefix r
## Make sure to set TMUX_CONFIG before starting.
bind r source-file $TMUX_CONFIG \; display-message "Sourced config"

# longer history
set-option -g history-limit 10000
set-option -g mouse on

# Window switching, using arrows keys since Ctrl+(h|j|k|l) is for vim
# pane navigation
bind -n C-S-Left swap-window -t -1
bind -n C-S-Right swap-window -t +1
bind -n C-Left select-window -t -1
bind -n C-Right select-window -t +1
bind -T copy-mode-vi C-S-Left swap-window -t -1
bind -T copy-mode-vi C-S-Right swap-window -t +1
bind -T copy-mode-vi C-Left select-window -t -1
bind -T copy-mode-vi C-Right select-window -t +1

# Pane navigation, Alt+(h|j|k|l)
bind -n M-h select-pane -L
bind -n M-l select-pane -R
bind -n M-k select-pane -U
bind -n M-j select-pane -D
bind -T copy-mode-vi M-h select-pane -L
bind -T copy-mode-vi M-l select-pane -R
bind -T copy-mode-vi M-k select-pane -U
bind -T copy-mode-vi M-j select-pane -D

# Pane resizing, Alt+(arrow)
bind -n -r M-Left resize-pane -L
bind -n -r M-Right resize-pane -R
bind -n -r M-Up resize-pane -U
bind -n -r M-Down resize-pane -D

# Pane information
# "p"revious window, handled by C-Left
unbind p
## redirecting to /dev/null prevents output from being shown in the current window
bind p display-message "#{pane_pid}" \; run-shell "printf '%d' #{pane_pid} | $TMUX_COPY_COMMAND > /dev/null"

# Split creation, \ for vertical and - for horizontal, shift to use current directory (
# for a shell on the tmux host)
bind \\ split-window -h
bind - split-window -v
unbind '"'
unbind %
# Split creation in same directory.
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Default vi-mode copy navigation
setw -g mode-keys vi

# Time which tmux will wait after ESC before sending through to contained
# application. Default is 500ms which is very slow in vim/shell.
# Setting to 0 causes issues using Windows Terminal (preview) + native Windows
# SSH + remote tmux (prints `/1;0c_` on attach), so pick a small non-zero value.
set-option -s escape-time 20

# Clipboard
## Delegate to environment variable to support multiple environments
set-option -g copy-command "$TMUX_COPY_COMMAND"
## y yanks to clipboard and tmux buffer, then stays in copy mode
bind -T copy-mode-vi y send-keys -X copy-pipe \; send-keys -X copy-selection
## Enter yanks to clipboards then exits copy mode
unbind -T copy-mode-vi Enter
bind -T copy-mode-vi Enter send-keys -X copy-pipe \; send-keys -X copy-selection-and-cancel

# Copy-mode helpers
## Count selected characters
bind -T copy-mode-vi c \
  send-keys -X copy-pipe \
    "wc --chars | xargs printf 'Length: %d' | xargs -0 tmux display-message"

# Pane titles
#bind T send-keys Escape 0 i "printf '\\033]2;%s\\033' '" Escape A "'" Enter

# Prevent window rename by shell after window is manually named
# http://stackoverflow.com/questions/6041178/keep-the-windows-name-fixed-in-tmux
set-option -g allow-rename off

# We manually handle system clipboard propagation, so disable xterm clipboard reporting.
set-option -g set-clipboard off

# By default tmux sets $TERM to 'screen'. This is not recognized by curses on AIX,
# so vi fails. We set this explicitly for compatibility.
set-option -g default-terminal xterm-256color

# Command aliases
## renumber windows
set-option -s command-alias[2] renumber='movew -r'

# - Notifications -------------------------------------------------------------
# There are two use cases for notifications:
# 1. notification on command completion
# 2. notification on prompt
# For notification on command completion, use bell either as part of PS1 or
# appended to a long-running command (`; printf '\a'`).

# We keep track of panes for which we want to propagate notifications using a
# tag at the # end of the pane title: `[n]`.

# Toggle command-exits for current pane.
bind-key -T prefix N {
    # If the pane title is already tagged, then remove the tag.
    if-shell -F "#{m/r:\\[n\\]$,#{pane_title}}" {
        # If we already have a notification tag, then strip it.
        select-pane -T "#{s/ \\[n\\]$//:pane_title}";
        display-message "Turned notification OFF"
    } {
        # Prompts (-p) already have a space added unconditionally at the end.
        command-prompt -I "#{pane_title}" -p "Name:" {
            # Set pane title to include tag.
            select-pane -T "%1 [n]";
            display-message "Turned notification ON"
        }
    }
}

set-hook -g alert-bell {
    if-shell -F "#{m/r:\\[n\\]$,#{pane_title}}" {
        # Strip tag.
        select-pane -T "#{s/ \\[n\\]$//:pane_title}";
        # Send notification, stripping tag before sending.
        run-shell -b "notify #{q:pane_title}\\ \\(#{pane_id}\\) >/dev/null 2>1";
        display-message "Notification sent"
    }
}

# - UI ------------------------------------------------------------------------
# Status bar
set -g status-justify left
set -g status-style bg=default,fg=colour12
set -g status-interval 1

setw -g clock-mode-colour colour135
setw -g mode-style bold

set -g status-position top
set -g status-style bg=colour234,fg=colour137,dim
set -g status-left '#{?client_prefix,#[reverse],}#[fg=colour255] [#S] '
set -g status-right "#{?alternate_on,#[reverse],}\"#{=10:pane_title}\"#[default] #[fg=colour233,bg=colour241,bold] %m/%d #[fg=colour233,bg=colour245,bold] %H:%M:%S "
set -g status-right-length 50
set -g status-left-length 20

setw -g window-status-current-style fg=colour81,bg=colour238,bold
setw -g window-status-current-format ' #I#[fg=colour250]:#[fg=colour255]#W#[fg=colour50]#F '

setw -g window-status-style fg=colour138,bg=colour235,none
setw -g window-status-format ' #I#[fg=colour237]:#[fg=colour250]#W#[fg=colour244]#F '
